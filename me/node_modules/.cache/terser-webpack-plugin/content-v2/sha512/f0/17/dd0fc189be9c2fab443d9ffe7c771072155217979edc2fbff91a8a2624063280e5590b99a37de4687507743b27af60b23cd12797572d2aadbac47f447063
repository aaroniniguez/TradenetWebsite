{"map":"{\"version\":3,\"sources\":[\"/home/ec2-user/ReactWebsite/me/src/App.js\",\"/home/ec2-user/ReactWebsite/me/src/serviceWorker.js\",\"/home/ec2-user/ReactWebsite/me/src/index.js\"],\"names\":[\"Home\",\"react_default\",\"a\",\"createElement\",\"About\",\"Topics\",\"_ref\",\"match\",\"react_router_dom\",\"to\",\"concat\",\"url\",\"react_router\",\"path\",\"component\",\"Topic\",\"exact\",\"render\",\"_ref2\",\"params\",\"topicId\",\"BasicExample\",\"Boolean\",\"window\",\"location\",\"hostname\",\"ReactDOM\",\"App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"oNA4BA,SAASA,IACP,OACEC,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,SAKN,SAASC,IACP,OACEH,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,UAKN,SAASE,EAATC,GAA2B,IAATC,EAASD,EAATC,MAChB,OACEN,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,UACAF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,IAAX,eAAR,yBAEFV,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,IAAX,gBAAR,eAEFV,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,IAAX,mBAAR,oBAIJV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAI,GAAAH,OAAKH,EAAMM,KAAX,aAA4BC,UAAWC,IAClDd,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEI,OAAK,EACLH,KAAMN,EAAMM,KACZI,OAAQ,WAAA,OAAMhB,EAAAC,EAAAC,cAAA,KAAA,KAAA,8BAMtB,SAASY,EAATG,GAA0B,IAATX,EAASW,EAATX,MACf,OACEN,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAKI,EAAMY,OAAOC,UAKTC,IAAAA,EA3Ef,WACE,OACEpB,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFR,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,UAAT,UAEFR,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,YAGJR,EAAAC,EAAAC,cAAA,KAAA,MAEAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOI,OAAK,EAACH,KAAK,IAAIC,UAAWd,IACjCC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWV,IAChCH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWT,OCVrBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,EAAAA,EAAST,OAAOhB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\";\\nimport { BrowserRouter as Router, Route, Link } from \\\"react-router-dom\\\";\\n\\nfunction BasicExample() {\\n  return (\\n    <Router>\\n      <div>\\n        <ul>\\n          <li>\\n            <Link to=\\\"/\\\">Home</Link>\\n          </li>\\n          <li>\\n            <Link to=\\\"/about\\\">About</Link>\\n          </li>\\n          <li>\\n            <Link to=\\\"/topics\\\">Topics</Link>\\n          </li>\\n        </ul>\\n        <hr />\\n\\n        <Route exact path=\\\"/\\\" component={Home} />\\n        <Route path=\\\"/about\\\" component={About} />\\n        <Route path=\\\"/topics\\\" component={Topics} />\\n      </div>\\n    </Router>\\n  );\\n}\\n\\nfunction Home() {\\n  return (\\n    <div>\\n      <h2>Home</h2>\\n    </div>\\n  );\\n}\\n\\nfunction About() {\\n  return (\\n    <div>\\n      <h2>About</h2>\\n    </div>\\n  );\\n}\\n\\nfunction Topics({ match }) {\\n  return (\\n    <div>\\n      <h2>Topics</h2>\\n      <ul>\\n        <li>\\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\\n        </li>\\n        <li>\\n          <Link to={`${match.url}/components`}>Components</Link>\\n        </li>\\n        <li>\\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\\n        </li>\\n      </ul>\\n\\n      <Route path={`${match.path}/:topicId`} component={Topic} />\\n      <Route\\n        exact\\n        path={match.path}\\n        render={() => <h3>Please select a topic.</h3>}\\n      />\\n    </div>\\n  );\\n}\\n\\nfunction Topic({ match }) {\\n  return (\\n    <div>\\n      <h3>{match.params.topicId}</h3>\\n    </div>\\n  );\\n}\\n\\nexport default BasicExample;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{18:function(e,t,n){e.exports=n(28)},23:function(e,t,n){},28:function(e,t,n){\"use strict\";n.r(t);var a=n(0),l=n.n(a),c=n(15),r=n.n(c),o=(n(23),n(6)),u=n(5);function m(){return l.a.createElement(\"div\",null,l.a.createElement(\"h2\",null,\"Home\"))}function i(){return l.a.createElement(\"div\",null,l.a.createElement(\"h2\",null,\"About\"))}function E(e){var t=e.match;return l.a.createElement(\"div\",null,l.a.createElement(\"h2\",null,\"Topics\"),l.a.createElement(\"ul\",null,l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"\".concat(t.url,\"/rendering\")},\"Rendering with React\")),l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"\".concat(t.url,\"/components\")},\"Components\")),l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"\".concat(t.url,\"/props-v-state\")},\"Props v. State\"))),l.a.createElement(u.a,{path:\"\".concat(t.path,\"/:topicId\"),component:p}),l.a.createElement(u.a,{exact:!0,path:t.path,render:function(){return l.a.createElement(\"h3\",null,\"Please select a topic.\")}}))}function p(e){var t=e.match;return l.a.createElement(\"div\",null,l.a.createElement(\"h3\",null,t.params.topicId))}var s=function(){return l.a.createElement(o.a,null,l.a.createElement(\"div\",null,l.a.createElement(\"ul\",null,l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"/\"},\"Home\")),l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"/about\"},\"About\")),l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"/topics\"},\"Topics\"))),l.a.createElement(\"hr\",null),l.a.createElement(u.a,{exact:!0,path:\"/\",component:m}),l.a.createElement(u.a,{path:\"/about\",component:i}),l.a.createElement(u.a,{path:\"/topics\",component:E})))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(l.a.createElement(s,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[18,1,2]]]);","extractedComments":[]}